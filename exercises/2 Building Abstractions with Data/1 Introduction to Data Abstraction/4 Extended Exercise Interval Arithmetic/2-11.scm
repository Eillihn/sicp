#lang sicp

;; In passing, Ben also cryptically comments: ``By testing the signs of the endpoints 
;; of the intervals, it is possible to break mul-interval into nine cases, only one of 
;; which requires more than two multiplications.'' 
;; Rewrite this procedure using Ben's suggestion.

(define (make-interval a b) (cons a b))
(define (upper-bound interval) (max (car interval) (cdr interval))) 
(define (lower-bound interval) (min (car interval) (cdr interval))) 
(define (old-mul-interval x y)
    (let    ((p1 (* (lower-bound x) (lower-bound y)))
            (p2 (* (lower-bound x) (upper-bound y)))
            (p3 (* (upper-bound x) (lower-bound y)))
            (p4 (* (upper-bound x) (upper-bound y))))
        (make-interval  (min p1 p2 p3 p4)
                        (max p1 p2 p3 p4))))


;; Answer:

(define (pos? x) (>= x 0))
(define (neg? x) (< x 0))
(define (eql-interval a b)
    (and    (= (upper-bound a) (upper-bound b))
            (= (lower-bound a) (lower-bound b))))

(define (mul-interval x y)
    (let    ((lx (lower-bound x))
            (ux (upper-bound x))
            (ly (lower-bound y))
            (uy (upper-bound y)))
        (cond   ((and (pos? lx) (pos? ly) (< ux ly))
                    (let    ((a (* lx ly))
                            (b (* ux uy)))
                        (make-interval a b)))
                ((and (neg? lx) (pos? ux) (pos? ly) (< ux ly))
                    (let    ((a (* lx uy))
                            (b (* ux uy)))
                        (make-interval a b)))
                ((and (neg? ux) (pos? ly) (< ux ly))
                    (let    ((a (* lx uy))
                            (b (* ux ly)))
                        (make-interval a b)))
                ((and (neg? ux) (neg? ly) (pos? uy) (< ux ly))
                    (let    ((a (* lx uy))
                            (b (* lx ly)))
                        (make-interval a b)))
                ((and (neg? ux) (neg? uy) (< ux ly))
                    (let    ((a (* ux uy))
                            (b (* lx ly)))
                        (make-interval a b)))
                ((and (neg? ly) (pos? uy) (pos? lx) (< uy lx))
                    (let    ((a (* ly ux))
                            (b (* uy lx)))
                        (make-interval a b)))
                ((and (neg? uy) (pos? lx) (< uy lx))
                    (let    ((a (* ly ux))
                            (b (* uy lx)))
                        (make-interval a b)))
                ((and (neg? uy) (neg? lx) (pos? ux) (< uy lx))
                    (let    ((a (* ly ux))
                            (b (* ly lx)))
                        (make-interval a b)))
                (else (let ((p1 (* lx ly))
                            (p2 (* lx uy))
                            (p3 (* ux ly))
                            (p4 (* ux uy)))
                        (make-interval  (min p1 p2 p3 p4)
                                        (max p1 p2 p3 p4)))))))



;; Test code:
(eql-interval (old-mul-interval (make-interval 1 2) (make-interval 3 4))
   (mul-interval (make-interval 1 2) (make-interval 3 4)))
(eql-interval (old-mul-interval (make-interval -1 2) (make-interval 3 4))
   (mul-interval (make-interval -1 2) (make-interval 3 4)))
(eql-interval (old-mul-interval (make-interval -2 -1) (make-interval 3 4))
   (mul-interval (make-interval -2 -1) (make-interval 3 4)))
(eql-interval (old-mul-interval (make-interval -2 -1) (make-interval -0.5 4))
   (mul-interval (make-interval -2 -1) (make-interval -0.5 4)))
(eql-interval (old-mul-interval (make-interval -2 -1) (make-interval -0.5 -0.25))
   (mul-interval (make-interval -2 -1) (make-interval -0.5 -0.25)))
(eql-interval (old-mul-interval (make-interval 3 4) (make-interval -1 2))
   (mul-interval (make-interval 3 4) (make-interval -1 2)))
(eql-interval (old-mul-interval (make-interval 3 4) (make-interval -2 -1))
   (mul-interval (make-interval 3 4) (make-interval -2 -1)))
(eql-interval (old-mul-interval (make-interval -0.5 4) (make-interval -2 -1))
   (mul-interval (make-interval -0.5 4) (make-interval -2 -1)))
(eql-interval (old-mul-interval (make-interval 1 3) (make-interval 2 4))
   (mul-interval (make-interval 1 3) (make-interval 2 4)))
