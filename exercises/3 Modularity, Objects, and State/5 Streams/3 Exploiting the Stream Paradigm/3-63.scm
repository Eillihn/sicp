#lang sicp
(#%require "../../../helpers/stream.scm")

(define (sqrt-improve guess x)
    (average guess (/ x guess)))

(define (average x y)
    (/ (+ x y) 2))

; (define (sqrt-stream x)
;     (define guesses
;         (cons-stream 1.0
;             (stream-map (lambda (guess)
;                             (sqrt-improve guess x))
;                         guesses)))
;     guesses)

; Louis Reasoner asks why the sqrt-stream procedure was not written in the following
; more straightforward way, without the local variable guesses:

(define (sqrt-stream x)
    (cons-stream 1.0
        (stream-map (lambda (guess)
                        (sqrt-improve guess x))
                    (sqrt-stream x))))

; Alyssa P. Hacker replies that this version of the procedure is considerably less efficient because it performs
; redundant computation. Explain Alyssa's answer. Would the two versions still differ in efficiency if our
; implementation of delay used only (lambda () <exp>) without using the optimization provided by
; memo-proc (section 3.5.1)?



; Answer:
; Results ot two versions are the same, but in Louis version (sqrt-stream x) is generated too many times -
; it is inefficient.

; Test:

(do ((i 0 (+ i 1)))
    ((= i 10))
    (newline)
    (display (stream-ref (sqrt-stream 2) i)))
