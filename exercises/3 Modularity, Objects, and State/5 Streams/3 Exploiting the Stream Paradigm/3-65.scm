#lang sicp
(#%require "../../../helpers/stream.scm")

; Use the series
; ln2= 1 - 1/2 + 1/3 -1/4 + ...
; to compute three sequences of approximations to the natural logarithm of 2, in the same way we did above
; for. How rapidly do these sequences converge?

(define (add-streams s1 s2)
    (stream-map + s1 s2))
(define integers (cons-stream 1 (add-streams ones integers)))
(define ones (cons-stream 1 ones))
(define (partial-sums s)
    (cons-stream (stream-car s) (add-streams (stream-cdr s) (partial-sums s))))

(define (euler-transform s)
    (let    ((s0 (stream-ref s 0)) ; Sn-1
            (s1 (stream-ref s 1)) ; Sn
            (s2 (stream-ref s 2))) ; Sn+1
        (cons-stream    (- s2 (/   (square (- s2 s1))
                                (+ s0 (* -2 s1) s2)))
                        (euler-transform (stream-cdr s)))))
(define (square x)
    (* x x))
(define (make-tableau transform s)
    (cons-stream s
        (make-tableau   transform
                        (transform s))))
(define (accelerated-sequence transform s)
    (stream-map stream-car
                (make-tableau transform s)))



; Answer:

(define (ln2-summands n)
    (cons-stream (/ 1.0 n)
        (stream-map - (ln2-summands (+ n 1)))))

(define ln2-stream
    (partial-sums (ln2-summands 1)))

(display-stream (accelerated-sequence euler-transform ln2-stream))
; Taking 7 terms of the sequence yields the correct value of to 10 decimal places.
