#lang sicp
(#%require "../../../helpers/stream.scm")

; Louis Reasoner thinks that building a stream of pairs from three parts is unnecessarily
; complicated. Instead of separating the pair (S0,T0) from the rest of the pairs in the first row, he proposes to
; work with the whole first row, as follows:



; Answer:
; It will be an infinit loop, because program will always try to evaluate pairs -> interleave -> pairs -> interleave.
(define (pairs s t)
    (interleave
        (stream-map (lambda (x) (list (stream-car s) x))
                    t)
        (pairs (stream-cdr s) (stream-cdr t))))

; Test:

(do ((i 0 (+ i 1)))
    ((= i 10))
    (newline)
    (display (stream-ref (pairs integers integers) i)))
