#lang sicp
(#%require "../../../helpers/stream.scm")

(define (sqrt-improve guess x)
    (average guess (/ x guess)))

(define (average x y)
    (/ (+ x y) 2))

(define (sqrt-stream x)
    (cons-stream 1.0
        (stream-map (lambda (guess)
                        (sqrt-improve guess x))
                    (sqrt-stream x))))

; Write a procedure stream-limit that takes as arguments a stream and a number (the
; tolerance). It should examine the stream until it finds two successive elements that differ in absolute value
; by less than the tolerance, and return the second of the two elements. Using this, we could compute square
; roots up to a given tolerance by

(define (sqrt x tolerance)
    (stream-limit (sqrt-stream x) tolerance))



; Answer:
(define (stream-limit x tolerance)
    (define (good-enough? a b)
        (< (abs (- a b)) tolerance))
    (if (good-enough? (stream-ref x 1) (stream-ref x 0))
        (stream-ref x 1)
        (stream-limit (stream-cdr x) tolerance)))

; Test:
(sqrt 2 0.000001)
