#lang racket

(define (make-interval a b) (cons a b))
(define (upper-bound interval) (max (car interval) (cdr interval))) 
(define (lower-bound interval) (min (car interval) (cdr interval))) 

(define (make-center-percent c p)
    (let ((w (* c (/ p 100))))
        (make-interval (- c w) (+ c w))))
(define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2))
(define (percent i)
    (* (/ (width i) (center i)) 100))

(define (eql-interval a b)
    (and    (= (upper-bound a) (upper-bound b))
            (= (lower-bound a) (lower-bound b))))
(define (print-interval p)
    (newline)
    (display "[")
    (display (lower-bound p))
    (display ";")
    (display (upper-bound p))
    (display "]"))

(define (div-interval x y)
    (if (or (= 0 (lower-bound y)) (= 0 (upper-bound y)))
        (error "Error: second interval spans 0" y)
        (mul-interval   x  
                        (make-interval  (/ 1. (upper-bound y)) 
                                        (/ 1. (lower-bound y))))))
(define (mul-interval x y)
    (let    ((p1 (* (lower-bound x) (lower-bound y)))
            (p2 (* (lower-bound x) (upper-bound y)))
            (p3 (* (upper-bound x) (lower-bound y)))
            (p4 (* (upper-bound x) (upper-bound y))))
        (make-interval  (min p1 p2 p3 p4)
                        (max p1 p2 p3 p4))))
(define (add-interval x y)
    (make-interval  (+ (lower-bound x) (lower-bound y))
                    (+ (upper-bound x) (upper-bound y))))


(provide (all-defined-out))